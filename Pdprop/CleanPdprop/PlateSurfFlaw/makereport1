#!/bin/bash
#
# makereport1    local (in this folder) command script to help user 
#             transform the outputfile into an html report.
# Usage:   ./makereport simOutFileName

#  Copyright (C) 2013  Al Conle
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the license, or (at
# your option) any later version.
#  This  file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTA-
# BILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#  You should have received a copy of the GNU General PUblic License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place -Suite 330, Boston, MA 02111-1307, USA. Try also their
# web site: http://www.gnu.org/copyleft/gpl.html

HTML=tempHTML$$
TMP2=/tmp/temp222.$$
#dadn=temp.dadn

#    Start writing the html page...............................
#echo Content-type: text/html  >$HTML

  echo >$HTML
  echo "<HEAD>" >>$HTML
  echo "<TITLE>Results for $1 : Crack Propagation Plate Surface Flaw</TITLE>" >>$HTML
  echo "</HEAD>">>$HTML
  echo "<BODY>" >>$HTML

  echo "<H2>Results for $1 : Crack Propagation Plate Surface Flaw</H2>" >>$HTML
  echo "<b>Author: A. Conle<br>" >>$HTML
  echo "<i>Affiliation:  Univ. of Windsor ON  Canada</i></b><br>" >>$HTML
  date >>$HTML
#  echo "<p>" >>$HTML

# In the plateWeldflaw.f  the write per rev is:
#   write(6,120) nrev,totdam90,totdam00,nblk,nact,lobj90,lobj00, xMm90,xMb90,xMm00,xMb00,
#     &             xMkm90,xMkb90,xMkm00,xMkb00,xfw,nptt90,nptt00
#  120 format("#crk=",i9,2(1x,e14.7),i8,1x,i6,2(1x,f7.2),
#     &             9(1x,f7.4),i4,1x,i4)

# Thus the last data line in $1 should look like this:
#crk=   663834  0.4648083E+01  0.2099533E+02   47417     10 -416.62 -559.12  1.3448  0.6397  0.7432  0.6166  1.0000  1.0000  1.8741  1.5584  1.1177   3    2

echo "Preparing input data summary for html page ..."
echo "<p>Simulation input data:<br> "             >>$HTML
grep ^\#B\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>B=</b> $item2 mm<br>"             >>$HTML

grep ^\#W\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>W=</b> $item2 mm<br>"             >>$HTML

#grep ^\#ri\= pdprop.env >$TMP2
#read <$TMP2   item1 item2 LEFTOVER
#echo "<b>r<sub>i</sub>=</b> $item2 mm<br>"             >>$HTML

grep ^\#azero\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>a<sub>0</sub>=</b> $item2 mm<br>  "   >>$HTML

grep ^\#czero\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>c<sub>0</sub>=</b> $item2 mm<br>"     >>$HTML

grep ^\#L\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "<b>L=</b> $item2 mm<br><br>"          >>$HTML

grep ^\#MATERIAL\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo " $item1 $item2 <br>"                  >>$HTML


grep ^\#TYPE\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo "$item1 $item2<br>"                    >>$HTML

grep ^\#ACTIVATE_MmMb\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo $item1 $item2                          >>$HTML

grep ^\#ACTIVATE_MkmMkb\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo _____$item1 $item2                     >>$HTML

grep ^\#ACTIVATE_fw\= pdprop.env >$TMP2
read <$TMP2   item1 item2 LEFTOVER
echo _____$item1 $item2                     >>$HTML

# Make the data only file
echo "Input file is: $1   Making a data only file:  $1.dat ..."
grep  \#crk\=  $1   | ../delete1arg  >$1.dat
# Now make a small version:
#   ../decimate 99  <$1.dat   >$1.d99
#  for making an   a  and c  vs revs plot we only need the small?  hmm,  depends...


# Right now we want:    nrev  totdam90(=a)   totdam00(=c)   nblk, nact
tail -1 $1.dat | awk '{print $1" "$1/2" "$2" "$3" "$4" "$5}' >$TMP2
read <$TMP2 nrev cycles a  c  nblk nact LEFTOVER

echo "<p>Crack Propagation Results:<br>(<i> " >>$HTML
grep vers\. $1 | grep plateWeldflaw           >>$HTML
echo "</i>) <ul><li>No. of Reversals= $nrev revs. or $cycles cycles" >>$HTML
echo "<li>Final _____ <b>a </b>=      $a   mm"    >>$HTML
echo "<li>Final _____ <b>c </b>=      $c   mm"    >>$HTML
echo "<li>No. of History Reps.= $nblk reps. + $nact revs."  >>$HTML
echo "</ul>"                    >>$HTML

#  Better just break out what we need into a temp file
#awk '{print $1" "$2" "$3}' <$1.dat >$1.nac
#   create the gnuplot load file
#   Find the first point of the last 1/4 of the file
wc -l  $1.dat
#   It ain't pretty...
    wc -l $1.dat | awk '{print int($1/4.0)}' >$TMP2
    read <$TMP2  labelLine LEFTOVER
echo "doing a tail -$labelLine ..."
    tail -$labelLine $1.dat  | head -1 >$TMP2
    cat $TMP2


#                 1    2         3       4    5    6       7       8    9      10   11
#   write(6,120) nrev,totdam90,totdam00,nblk,nact,lobj90,lobj00, xMm90,xMb90,xMm00,xMb00,
#                     12    13     14     15    16
#     &             xMkm90,xMkb90,xMkm00,xMkb00,xfw,nptt90,nptt00

echo "fetching line no.= $labelLine from the data for label placement..."
#     Also get all the other items for use in plotting the factors
#                 1     2     3    4    5     6      7     8      9    10  11
    read <$TMP2 item1 item2 item3 nblk nact lobj90 lobj00 xMm90 xMb90 xMm00 xMb00 \
          xMkm90 xMkb90 xMkm00 xMkb00 xfw  LEFTOVER
    echo "set term pngcairo size 512,384 font \"Arial,12\"" >loadgp0
    echo "set grid"                           >>loadgp0
    echo "set output \"$1.dat.png\""          >>loadgp0
    echo "set title \"$1 Crack Propagation\" "           >>loadgp0
    echo "set xlabel \"1/2 Cycles or Reversals\"  "      >>loadgp0
    echo "set ylabel \"a or c,  Crack Length mm\" "      >>loadgp0
    echo "set label \" a\" at $item1,$item2"             >>loadgp0
    echo "set label \" c\" at $item1,$item3"             >>loadgp0
    echo "plot  \"$1.dat\"  u 1:2 t \"a\" w l,\"\" u 1:3 t \"c\" w l lc 3" >>loadgp0
#   Now gnuplot can load the instructions in $TMP3
    gnuplot "loadgp0"
    echo "<p><img src=\"$1.dat.png\">"  >>$HTML
    echo "<br> " >>$HTML

echo "Fetching filtered history of Sb and Sm ..."
    rm temp.loads
    grep \#history\ \#Filteredck   $1 |../delete1arg | ../delete1arg >temp.loads
    echo "set term pngcairo size 480,360 font \"Arial,12\"" >loadgp1
    echo "set title \"Applied Sm and Sb Stress History\"" >>loadgp1
    echo "set grid"                                       >>loadgp1
    echo "set output \"$1.stress.png\""                   >>loadgp1
    echo "set xlabel \"Point No. or Reversals\"  "        >>loadgp1
    echo "set ylabel \"Sm or Sb, Stress MPa\" "           >>loadgp1
    echo "plot  \"temp.loads\"  u 4:1 title \"Sm\" w l, \"\" u 4:2 title \"Sb\" w l lc 3"  >>loadgp1
    gnuplot "loadgp1"
    echo "<p><img src=\"$1.stress.png\">"  >>$HTML
    echo "<br> " >>$HTML

echo "Plotting da/dn table from results file ..."
    grep ^\#dadnTable $1 |../delete1arg  >dadntable$$
    echo "set term pngcairo size 480,360 font \"Arial,12\"" >loadgp1b
    echo "set title \"Material Crack Propagation Data\""  >>loadgp1b
    echo "set logscale xy"                                >>loadgp1b
    echo "set grid"                                       >>loadgp1b
    echo "set output \"$1.dadn.png\""                     >>loadgp1b
    echo "set xlabel \"Delta K,  MPa*sqrt(mm)\"  "        >>loadgp1b
    echo "set ylabel \"da/dN,  mm/Cycle\" "               >>loadgp1b
    echo "plot  \"dadntable$$\"  u 1:2 title \"$1\" w lp" >>loadgp1b
    gnuplot "loadgp1b"
    echo "<p><img src=\"$1.dadn.png\">"  >>$HTML
    echo "<br> " >>$HTML

#  Ok,  for the Kmax,Kmin figures we are stuck with using the whole file
#       or we may get some peaks dropped due to aliasing caused by decimate.f
echo "Starting plot of Kmax and Kmin for direction  a ..."
    awk '{print $1" "$6" "$7}' <$1.dat >$1.nkk
    echo "set term pngcairo size 512,384 font \"Arial,12\"" >loadgp2
    echo "set grid"                           >>loadgp2
    echo "set title \"History of Kmax, Kmin for Crack in Direction a\"">>loadgp2
    echo "set output \"$1.Kmax+Kmin90.png\""               >>loadgp2
    echo "set xlabel \"1/2 Cycles or Reversals\"  "        >>loadgp2
    echo "set ylabel \"Kmax, or Kmin for each Reversal\" " >>loadgp2
    echo "plot  \"$1.nkk\"  u 1:2 w p"                     >>loadgp2
#   Now gnuplot can load the instructions in loadgp2
    gnuplot "loadgp2"
    echo "<p><img src=\"$1.Kmax+Kmin90.png\">"  >>$HTML
    echo "<br> " >>$HTML

echo "Starting plot of Kmax and Kmin for direction  c ..."
    echo "set term pngcairo size 512,384 font \"Arial,12\"" >loadgp3
    echo "set grid"                           >>loadgp3
    echo "set title \"History of Kmax, Kmin for Crack in Direction c\"">>loadgp3
    echo "set output \"$1.Kmax+Kmin00.png\""               >>loadgp3
    echo "set xlabel \"1/2 Cycles or Reversals\"  "        >>loadgp3
    echo "set ylabel \"Kmax, or Kmin for each Reversal\" " >>loadgp3
    echo "plot  \"$1.nkk\"  u 1:3 w p"                     >>loadgp3
#   Now gnuplot can load the instructions in loadgp3
    gnuplot "loadgp3"
    echo "<p><img src=\"$1.Kmax+Kmin00.png\">"  >>$HTML
    echo "<br> " >>$HTML


#                 1    2         3       4    5    6       7       8    9      10   11
#   write(6,120) nrev,totdam90,totdam00,nblk,nact,lobj90,lobj00, xMm90,xMb90,xMm00,xMb00,
#                     12    13     14     15    16
#     &             xMkm90,xMkb90,xMkm00,xMkb00,xfw,nptt90,nptt00
echo "Starting plot of the Factors Mm, Mb, for depth and surf. crack ..."
    echo "set term pngcairo size 600,600 font \"Arial,12\"" >loadgp4
    echo "set grid"                           >>loadgp4
    echo "set title \"$1 History of Factors for Depth a and Surface c\"">>loadgp4
    echo "set output \"$1.factors.png\""                  >>loadgp4
    echo "set xlabel \"1/2 Cycles or Reversals\"  "       >>loadgp4
    echo "set ylabel \"Mm Mb Mkm Mkb  for each Reversal\" "  >>loadgp4
    echo "set label \"  a_Mm\"  at $item1,$xMm90"            >>loadgp4
    echo "set label \"  a_Mb\"  at $item1,$xMb90"            >>loadgp4
    echo "set label \"     c_Mm\" at $item1,$xMm00"          >>loadgp4
    echo "set label \"     c_Mb\" at $item1,$xMb00"          >>loadgp4

    echo "set label \"  a_Mkm\"  at $item1,$xMkm90"          >>loadgp4
    echo "set label \"  a_Mkb\"  at $item1,$xMkb90"          >>loadgp4
    echo "set label \"     c_Mkm\" at $item1,$xMkm00"        >>loadgp4
    echo "set label \"     c_Mkb\" at $item1,$xMkb00"        >>loadgp4
    echo "set label \"  fw\" at $item1,$xfw"                 >>loadgp4
#         Note: use no space after \\
    echo "plot  \"$1.dat\"  u 1:8 title \"a_Mm\" w l, \\"    >>loadgp4
    echo " \"\" u 1:9  title \"a_Mb\" w l, \\"               >>loadgp4
    echo " \"\" u 1:10 t \"c_Mm\" w l, \\"                   >>loadgp4
    echo " \"\" u 1:11 t \"c_Mb\" w l, \\"                   >>loadgp4
    echo " \"\" u 1:12 t \"a_Mkm\" w l, \\"                  >>loadgp4
    echo " \"\" u 1:13 t \"a_Mkb\" w l, \\"                  >>loadgp4
    echo " \"\" u 1:14 t \"c_Mkm\" w l lc \"yellow\", \\"    >>loadgp4
    echo " \"\" u 1:15 t \"c_Mkb\" w l lc \"black\", \\"     >>loadgp4
    echo " \"\" u 1:16 t \"fw\" w l"                         >>loadgp4
#   Now gnuplot can load the instructions in $TMP3
    gnuplot "loadgp4"
    echo "<p><img src=\"$1.factors.png\">"  >>$HTML
    echo "<br> " >>$HTML


echo "Checking if Crack initiation life can be calculated..."
    grep ^\#MATERIAL\= pdprop.env | tail -1   > $TMP2
    read <$TMP2 item1  fileMat LEFTOVER
    echo "found:   " $item1  $fileMat ;
    if [ $fileMat != "none" ]; then
#      Yes, material was defined. We can use it to run initiation sim.
#      The stress history file should have been written out by the crack prop. sim.
#      Time to get fancy again. We need to specify the maxima for the rainflow count.
#      Theoretically it is possible to have a Smax that is negative thus:
       ../hilo2 <loads4rain.out |  grep -v \#  >$1.rain.hilo
#       cat $1.rain.hilo
#      pdrain will hunt for max and min before it begins counting...
       echo "     ../pdrain 2 <loads4rain.out  >$1.rain.txt"
       ../pdrain 2  <loads4rain.out  >$1.rain.txt
       
     else
       echo "No Stress-Strain-Life Materials file specified."  >>$HTML
       echo "Thus no crack initiation simulation possible."  >>$HTML
       mv $HTML  $1.html
       echo "Deleting temporary files:  loadgp0,1,1b,2,3,4"
       rm loadgp0 loadgp1 loadgp1b loadgp2 loadgp3 
       echo "Done. html file is: $1.html   Making pdf ..."
       echo "htmldoc --webpage --footer ..1 -f $1.pdf $1.html"
       htmldoc --webpage --footer ..1 -f $1.pdf $1.html
       echo "Done. In Linux you can view pdf with command: "
       echo "          evince $1.pdf"
       exit
     fi

#      Ok, we have a potential material file in matfile
       echo "<!-- PAGE BREAK -->"                                    >>$HTML
       echo "<h2>Crack Initiation Life Results for $1</h2>"          >>$HTML
       cp loads4rain.out $1.loads4rain.txt
       cp matfile $1.matfile.txt
       echo "Files Used:"                                   >>$HTML
       echo "<ul><li><a href=\"$1.loads4rain.txt\">Stress History (Sb+Sm)</a>" >>$HTML
       echo "<li><a href=\"$1.rain.txt\">Rainflow File</a>"         >>$HTML
       echo "<li><a href=\"$1.matfile.txt\">Material File</a>"      >>$HTML
       echo "</ul>" >>$HTML
echo "Starting Initiation calculations..."
       echo "../saefcalc2  matfile 1.0 <$1.rain.txt >$1.initiationCalcs"
       ../saefcalc2  matfile 1.0 <$1.rain.txt >$1.initResults

       echo "<pre>"                  >>$HTML
       grep \#xcalc2 <$1.initResults | ../delete1arg  >>$HTML
       echo "</pre>"              >>$HTML

       echo "Predicted History Repetitions to Initiation:" >>$HTML
       echo "<pre><b>"                                     >>$HTML
       grep \#xcalc3 <$1.initResults  | ../delete1arg      >>$HTML
       echo "</b></pre>"                                   >>$HTML

#      fetch the hysteresis loops for plotting

       echo "<h3>Local Stress and Strain Response:</h3>" >>$HTML
       grep -i \#plotloops $1.initResults | ../delete1arg >temp5
#      create the gnuplot load file
       echo "set term pngcairo font \"Arial,10\"" >loadgp5
       echo "set grid"                        >>loadgp5
       echo "set output \"$1ss.png\" "        >>loadgp5
       echo "set xlabel \"Strain\"  "         >>loadgp5
       echo "set ylabel \"Stress, MPa\" "     >>loadgp5
       echo "plot  \"temp5\"  w lp"           >>loadgp5
       gnuplot "loadgp5"
       echo "<p><img src=\"$1ss.png\"><br>"  >>$HTML

#Fetch boxed cumulative cycle plot and damage plot data
    echo "<h3>Cumulative Cycle Plot of History and Damage:</h3>" >>$HTML
    grep -i \#plothist $1.initResults | ../delete1arg >temp6
    grep -i \#plotdam  $1.initResults | ../delete1arg >temp7

#   create the gnuplot load file, re-use $TMP3
    echo "set term pngcairo font \"Arial,12\""  >loadgp6
    echo "set output \"$1.damage.png\" "       >> loadgp6
    echo "set logscale x "                     >> loadgp6
    echo "set xlabel \"Cumulative Cycles\" "   >> loadgp6
    echo "set xrange [0.1:*] "                 >> loadgp6
    echo "set ylabel \"Nominal Stress, MPa\" " >> loadgp6

    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2range [0.:100.] "            >> loadgp6
    echo "set format y2 \"%f\"  "            >> loadgp6

    echo "plot \"temp6\" title \"History\" w lp, \"temp7\" axes x1y2 title \"SWaT\" w lp, \"temp7\" u 1:3 axes x1y2 title \"Morrow\" w lp" >> loadgp6
    gnuplot "loadgp6"
    echo "<p><img src=\"$1.damage.png\">"  >>$HTML
    echo "<br> " >>$HTML
    echo "<i>(Rectangles are Rainflow Cycle Sets: Sorted by Range: largest on Left)</i>" >>$HTML

echo "<h2>Appendix 1:   Print of  \"pdprop.env\" Simulation Control file</h2>"  >>$HTML
    echo "<pre>"                        >>$HTML
    cat pdprop.env                      >>$HTML
    echo "</pre>"                       >>$HTML


echo "<h2>Appendix 2:   Print of  da/dn vs DeltaK Table in file $1 </h2>"          >>$HTML
    echo "<pre>"                        >>$HTML
#   file was created by a grep for dadn plot (above)
    echo "   Delta_K        da/dN"      >>$HTML
    cat dadntable$$                     >>$HTML
    echo "</pre>"                       >>$HTML
    rm dadntable$$


echo "<h2>Appendix 3:   Print of  Stress-Strain-Init.Life file: \"matfile\" </h2>"  >>$HTML
    echo "<pre>"                        >>$HTML
    cat matfile                         >>$HTML
    echo "</pre>"                       >>$HTML


echo "</BODY></HTML>" >>$HTML
    rm $TMP2
    echo "Deleting temporary files:  loadgp0,1,1b,2,3,4,5,6  temp5,6,7"
    rm loadgp0 loadgp1 loadgp1b loadgp2 loadgp3  loadgp5 loadgp6
    rm temp5 temp6 temp7
    mv $HTML  $1.html
    echo "Done. html file is: $1.html   Making pdf ..."
    echo "htmldoc --webpage --footer ..1 -f $1.pdf $1.html"
    htmldoc --webpage --footer ..1 -f $1.pdf $1.html
    echo "Done. In Linux you can view pdf with command: "
    echo "          evince $1.pdf"
    exit

