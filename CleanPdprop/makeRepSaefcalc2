#!/bin/bash
# makeRepSaefcalc2  vers. 0.9  local (in this folder) command script to 
#             help user transform the outputfile into an html/pdf report.
# Usage:   ./makeRepSaefcalc2 saefcalc2outputfile

# Programs also needed:  gnuplopt,  delete1arg, htmldoc

#  Copyright (C) 2013  Al Conle
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the license, or (at
# your option) any later version.
#  This  file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTA-
# BILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#  You should have received a copy of the GNU General PUblic License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place -Suite 330, Boston, MA 02111-1307, USA. Try also their
# web site: http://www.gnu.org/copyleft/gpl.html

HTML=tempHTML$$
TMP2=/tmp/temp222.$$
#dadn=temp.dadn

#    Start writing the html page...............................
#echo Content-type: text/html  >$HTML

  echo >$HTML
  echo "<HEAD>" >>$HTML
  echo "<TITLE>Results for $1 : Crack Initiation Using saefcalc2 </TITLE>" >>$HTML
  echo "</HEAD>">>$HTML
  echo "<BODY>" >>$HTML

  echo "<H2>Results for $1 : Crack Initiation Using saefcalc2 </H2>" >>$HTML
  echo "<b>Author: userNameHere <br>"        >>$HTML
  echo "<i>Affiliation:  where </i></b><br>" >>$HTML
  date       >>$HTML

  echo "<p>" >>$HTML
  grep \#version\= $1  >$TMP2
  # expecting: #version= 1.9  saefcalc2.f
  read <$TMP2   item1 item2 item3 LEFTOVER
  echo "<b>$item3 vers.=</b> $item2 <br>"         >>$HTML



echo "Preparing input data summary for html page ..."
echo "<p>Simulation input data:<br> "            >>$HTML

grep \#matfile\= $1 | head -1 >$TMP2
read <$TMP2   item1 materialFile LEFTOVER
echo "<b>Material file=</b> $materialFile <br>"        >>$HTML

grep ^\#multfactor\= $1 >$TMP2
read <$TMP2   item1 item2 LEFTOVER
#echo "<b>r<sub>i</sub>=</b> $item2 mm<br>"             >>$HTML
echo "<b>Multiplication Factor=</b> $item2 <br>"        >>$HTML


#      Ok, we have a potential material file in matfile
       echo "<h2>Crack Initiation Life Results for $1</h2>"          >>$HTML

       echo "<pre>"                                   >>$HTML
       grep \#xcalc2 <$1  | ./delete1arg                 >>$HTML
       echo "</pre>"                                  >>$HTML

       echo "Predicted History Repetitions to Initiation:" >>$HTML
       echo "<pre><b>"                                     >>$HTML
       grep \#xcalc3 <$1  | ./delete1arg      >>$HTML
       echo "</b></pre>"                                   >>$HTML

#      fetch the hysteresis loops for plotting

       echo "<!-- PAGE BREAK -->"                        >>$HTML
       echo "<h3>Local Stress and Strain Response:</h3>" >>$HTML
       grep -i \#plotloops $1 | ./delete1arg >temp5
#      create the gnuplot load file
       echo "set term pngcairo font \"Arial,10\"" >loadgp5
       echo "set grid"                        >>loadgp5
       echo "set output \"$1ss.png\" "        >>loadgp5
       echo "set xlabel \"Strain\"  "         >>loadgp5
       echo "set ylabel \"Stress, MPa\" "     >>loadgp5
       echo "plot  \"temp5\"  w lp"           >>loadgp5
       gnuplot "loadgp5"
       echo "<p><img src=\"$1ss.png\"><br>"  >>$HTML

#Fetch boxed cumulative cycle plot and damage plot data
    echo "<!-- PAGE BREAK -->"                                   >>$HTML
    echo "<h3>Cumulative Cycle Plot of History and Damage:</h3>" >>$HTML
    grep -i \#plothist $1 | ./delete1arg >temp6
    grep -i \#plotdam  $1 | ./delete1arg >temp7

#   create the gnuplot load file, re-use $TMP3
    echo "set term pngcairo font \"Arial,12\""  >loadgp6
    echo "set output \"$1.damage.png\" "       >> loadgp6
    echo "set logscale x "                     >> loadgp6
    echo "set xlabel \"Cumulative Cycles\" "   >> loadgp6
    echo "set xrange [0.1:*] "                 >> loadgp6
    echo "set ylabel \"Nominal Stress, MPa\" " >> loadgp6

    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2label \"% Damage\" "         >> loadgp6
    echo "set y2range [0.:100.] "            >> loadgp6
    echo "set format y2 \"%f\"  "            >> loadgp6

    echo "plot \"temp6\" title \"History\" w lp, \"temp7\" axes x1y2 title \"SWaT\" w lp, \"temp7\" u 1:3 axes x1y2 title \"Morrow\" w lp" >> loadgp6
    gnuplot "loadgp6"
    echo "<p><img src=\"$1.damage.png\">"  >>$HTML
    echo "<br> " >>$HTML
    echo "<i>(Rectangles are Rainflow Cycle Sets: Sorted by Range: largest on Left)</i>" >>$HTML

    echo "<!-- PAGE BREAK -->"                                   >>$HTML
    echo "<h2>Appendix 1: Rainflow Cycles </h2>"          >>$HTML
    echo "<pre>"                        >>$HTML
    grep \#Inputs\= $1 | ./delete1arg   >>$HTML
    echo "</pre>"                       >>$HTML


echo "<h2>Appendix 2: Stress-Strain-Init.Life file: \"$materialFile\" </h2>"  >>$HTML
    echo "<pre>"                        >>$HTML
    cat $materialFile                   >>$HTML
    echo "</pre>"                       >>$HTML


echo "</BODY></HTML>" >>$HTML
    rm $TMP2
    echo "Deleting temporary files:  loadgp5,6  temp5,6"
    rm loadgp5 loadgp6
    rm temp5 temp6 temp7
    mv $HTML  $1.html
    echo "Done. html file is: $1.html   Making pdf ..."
    echo "htmldoc --webpage --footer ..1 -f $1.pdf $1.html"
    htmldoc --webpage --footer ..1 -f $1.pdf $1.html
    echo "Done. In Linux you can view pdf with command: "
    echo "          evince $1.pdf"
    exit

